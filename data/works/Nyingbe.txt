id:04
heading:Nyingbe
github_link:
frontend_link:github.com/aatbip/nyingbe-frontend
backend_link:github.com/aatbip/nyingbe-api
live_link:
short_description:Nyingbe is an app to manage and share contents. 
images:meme-generator-1.jpg
description:Nyingbe's frontend is written in JavaScript using React. State management is handled using Context and useReducer hook. 
Backend of Nyingbe is written in Node.js and REST APIs are built using Express. It also has jwt based authentication logic.
I built Nyingby in order to implement my learnings of Context and useReducer hook. They provide many benefits as compared to state management with useState() and props drilling. 
<ul><li>Contexts make the states acessible globally. Using Contexts along with useReducer and a Provider HOC makes the project way better organized.</li><li>The Provider HOC contains actions which can be passed down to the component node.</li><li>Reducers can be declared in a new file (just like in Redux), then the new state can be returned according to the type of the action.</li><li>While Redux is more powerful than context and with Redux-Toolkit it is much more easier to set up a new project with Redux, there are many scenarios where using Context seems to be a more logical choice. Use Context when,<ul><li>you don't need advanced debugging tools like Redux Dev Tools</li><li>most of the data are static which are not often updated</li><li>you don't want to install external dependencies bundle in the app</li><li>you don't need advanced functionalities provided by Redux such as middlewares</li><li><i>If you're only using Redux to avoid passing down props, context could replace Redux - but then you probably didn't need Redux in the first place.</i> -Mark Erikson, creator of Redux Toolkit</li></ul></li></ul>

